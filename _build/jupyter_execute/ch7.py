#!/usr/bin/env python
# coding: utf-8

# # 조건문

# ## `if` 조건문

# 조건문<font size="2">conditional statement</font>은 특정 조건의 성립여부에 따라 다른 일을 하게 만드는 명령문이다. `if` 조건문을 사용하면 특정 조건이 참일 때만 어떤 코드가 실행되게 할 수 있다.
# 
# ```python
# if 조건 :
#     코드
# ```
# 
# `if` 키워드로 시작하며 그 뒤에 조건과 콜론(`:`)을 쓰고, 아래로 내려와서 들여쓰기<font size="2">indentation</font>를 한 다음 조건이 참일 때 실행할 코드를 작성한다. 

# 예를 들어, `x`가 0보다 작다면 `x는 음수다`를 출력하는 코드를 작성해보자.   
# 
# ```python
# if x < 0 :
#     print('x는 음수다')
# ```
# 
# 위 조건문이 실행되는 순간 변수 `x`가 가리키는 값이 0보다 작으면 `x는 음수다`를 출력하고, 그렇지 않으면 들여쓰기한 코드는 건너뛰고 다음 명령문으로 넘어간다. 

# In[1]:


x = -1

if x < 0 :
    print('x는 음수다')

print('여기!')


# In[2]:


x = 1

if x < 0 :
    print('x는 음수다')

print('여기!')


# :::{admonition} 주의    
# :class: caution  
# `if` 조건문 뒤에는 반드시 콜론을 사용해야 하고, 조건이 참일 때 실행할 코드는 들여쓰기해야 한다. 그렇지 않으면 문법 오류(`SyntaxError`)가 발생한다. 이때 들여쓰기는 공백 4칸을 권장한다. 
# :::
# 

# :::{admonition} `pass` 명령문  
# :class: info    
# `if` 조건이 참일 때 실행할 코드를 작성하지 않으면 오류가 발생한다. 
# 
# ```python
# >>> if x < 0 :
#   File "/tmp/ipykernel_1694/3387527309.py", line 1
#     if x < 0 :
#               ^
# SyntaxError: unexpected EOF while parsing
# ```
# 
# `pass` 는 아무 것도 하지 않고 지나가도록 하는 명령문으로, `x`가 0보다 작을 때 할 일을 다음에 지정하고자 할 때 사용할 수 있다.  
# 
# ```python
# >>> if x < 0 :
#         pass
# ```
# :::
# 

# ````{prf:example}
# :label: cond_ex01  
# 
# 변수 `score`에 임의의 정수를 할당한 다음 `score`가 80이상이면 `합격입니다.`를 출력하는 코드를 작성하라. 
# 
# ```python
# >>> score = 95
# >>> if score >= 80 :
#         print('합격입니다.')
# 합격입니다.
# ```
# 
# ````

# ````{prf:example}
# :label: cond_ex02  
# 
# 변수 `n`에 임의의 정수를 할당한 다음 `n`이 홀수면 `n`의 제곱을 출력하는 코드를 작성하라. 
# 
# ```python
# >>> n = 7
# >>> if n % 2 == 1 :
#         print(n,'의 제곱 :', n ** 2)
# 7 의 제곱 : 49
# ```
# 
# 
# 정수 `1`은 `True`로 간주되기에 아래와 같이 코드를 작성할 수도 있다.  
#  
# ```python
# >>> n = 7
# >>> if n % 2 :
#         print(n,'의 제곱 :', n ** 2)
# 7 의 제곱 : 49
# ```
# 
# `n`의 제곱을 계산한 다음 그 결과를 출력할 수도 있다. `if` 조건이 참일 때 실행할 여러 줄의 코드는 들여쓰기 깊이가 같아야 한다.  
# 
# ```python
# >>> n = 7
# >>> if n % 2 == 1 :
#         result = n ** 2
#         print(n,'의 제곱 :', result)
# 7 의 제곱 : 49
# ```
# ````

# :::{admonition} 코드 블록<font size="2">code block</font>    
# :class: info    
# 프로그래밍에서 코드 블록은 특정한 일을 수행하는 한 단위의 코드 묶음을 말한다. 많은 프로그래밍 언어에서 중괄호(`{}`)로 묶여 있는 경우가 많으나 파이썬에서는 들여쓰기로 코드 블록을 지정한다. 
# :::
# 

# ````{prf:example}
# :label: cond_ex03  
# 
# 변수 `x`에 임의의 정수를 할당한 다음 `x`가 0보다 작으면 `x는 음수`, 크거나 같으면 `x는 음수 아님`를 출력하는 코드를 작성하라. 
# 
# ```python
# >>> x = -10
# >>> if x < 0 :
#         print('x는 음수')
# x는 음수
# >>> if x >= 0 :
#         print('x는 음수 아님')
# ```
# ```python
# >>> x = 10
# >>> if x < 0 :
#         print('x는 음수')
# >>> if x >= 0 :
#         print('x는 음수 아님')
# x는 음수 아님
# ```
# `x`는 `x < 0`와 `x >= 0`을 동시에 만족할 수 없지만 `if`문을 두 번 사용했기 때문에 파이썬은 각 조건을 모두 확인한다. 
# ````

# ## `if-else` 조건문

# `if-else` 조건문은 조건이 참이면 `코드1`을 실행하고, 거짓이면 `코드2`를 실행한다. 

# ```python
# if 조건 :
#     코드1
# else :
#     코드2
# ```
# 파이썬은 들여쓰기에 민감한 언어다. `if`와 `else`의 들여쓰기 깊이가 같아야 하고, `코드1`과 `코드2`도 들여쓰기 깊이가 같아야 한다. 

# 예를 들어, `x`가 0보다 작으면 `x는 음수`를 출력하고 크거나 같으면 `x는 음수 아님`를 출력하는 코드를 작성해보자. 
# 
# ```python
# if x < 0 :
#     print('x는 음수')
# else :
#     print('x는 음수 아님')
# ```
# 
# 위 조건문은 조건을 한 번만 확인하기 때문에 {prf:ref}`cond_ex03`에서 `if`문을 두 번 사용한 코드보다 효율적으로 동작한다.    

# ````{prf:example}
# :label: cond_ex04  
# 
# 변수 `a`에 임의의 정수를 할당한 다음 `a`의 절댓값을 출력하는 코드를 작성하라.  
# 
# ```python
# >>> a = -5
# >>> if a >= 0 :
#         print(a)
#     else :
#         print(-a)
# 5
# ```
# 
# ````
# 

# ## 조건부 표현식

# 조건부 표현식<font size="2">conditional expression</font>은 `if-else` 조건문을 한 줄로 표현하는 방법으로 형식은 다음과 같다.  
# 
# ```python
# 표현식1 if 조건 else 표현식2
# ```

# 예를 들어, 변수 `a`에 임의의 정수를 할당한 다음 `a`의 절댓값을 출력하는 코드를 조건부 표현식으로 작성해보자. 

# In[3]:


a = -5
print(a) if a >= 0 else print(-a)


# In[4]:


a = 3
print(a) if a >= 0 else print(-a)


# ## 중첩 조건문

# `if-else` 조건문을 중첩해서 사용하면 원하는 대로 경우를 나눠서 처리할 수 있다. 예를 들어, `x`가 `y`보다 큰지 작은지 같은지를 출력하는 코드를 다음과 같이 작성할 수 있다. 
# 
# ```python
# if x < y :
#     print('x가 y보다 작다')
# else :
#     if x > y :
#         print('x가 y보다 크다')
#     else :
#         print('x와 y가 같다')
# ```
# 
# 위의 중첩 조건문은 바깥 쪽에 위치한 조건`x < y`을 확인한 다음 조건이 거짓일 경우 `else` 아래있는 조건`x > y`를 확인한다. 

# 중첩 조건문을 많이 사용하면 코드가 복잡해질 수 있기 때문에 가능하면 사용하지 않는 것이 좋다. 예를 들어, 아래 코드는 중첩 조건문을 사용해 `x`가 0보다 크면서 동시에 10보다 작은 경우를 다룬다.  
# 
# ```python
# if x > 0 :
#     if x < 10 :
#         print('x는 0보다 크고 10보다 작다')
# ```
# 
# 하지만 `print()` 함수가 `x > 0`와 `x < 10`을 모두 만족하는 경우에만 실행되기에 아래와 같이 `and` 연산자를 이용하면 중첩 조건문을 사용하지 않아도 된다. 
# ```python
# if x > 0 and x < 10 :
#     print('x는 0보다 크고 10보다 작다')
# ```
# 
# 참고로 `x > 0 and x < 10`을 `0 < x < 10`로 표현할 수 있다. 
# ```python
# if 0 < x < 10 :
#     print('x는 0보다 크고 10보다 작다')
# ```

# ## 다중 조건문

# 다중 조건문을 사용하면 중첩 조건문보다 가독성 높게 세 개 이상의 경우를 다룰 수 있다.   
# 
# ```python
# if 조건1 :
#     코드1
# elif 조건2 :
#     코드2
# else :
#     코드3
# ```
# `elif`는 'else if'의 줄임말로 원하는 만큼 사용할 수 있고, `else` 문은 마지막에 한 번 사용하거나 생략할 수 있다. `if-elif-else`문은 위에 위치한 조건의 참거짓부터 차례대로 조사하며, 한 곳에서 만족되면 나머지 부분은 무시한다.

# 예를 들어, `x`가 `y`보다 큰지 작은지 같은지를 출력하는 코드를 다중 조건문으로 작성해보자.   
#    
# ```python  
# if x < y :
#     print('x가 y보다 작다')
# elif x > y :
#     print('x가 y보다 크다')
# else :
#     print('x와 y가 같다')
# ```

# 위 조건문이 실행되는 순간 `x`가 가리키는 값이 `y`가 가리키는 값보다 작으면 `x가 y보다 작다`를 출력하며 나머지 부분은 무시하고, `x`가 `y`보다 크면 `x가 y보다 크다`를 출력하고 나머지 부분은 무시한다. 두 조건을 모두 만족하지 않으면 `else` 아래 코드가 실행된다.    

# In[5]:


x = 3
y = 5

if x < y :
    print('x가 y보다 작다')
elif x > y :
    print('x가 y보다 크다')
else :
    print('x와 y가 같다')


# In[6]:


x = 7
y = 5

if x < y :
    print('x가 y보다 작다')
elif x > y :
    print('x가 y보다 크다')
else :
    print('x와 y가 같다')


# In[7]:


x = 7
y = 7

if x < y :
    print('x가 y보다 작다')
elif x > y :
    print('x가 y보다 크다')
else :
    print('x와 y가 같다')


# ````{prf:example}
# :label: cond_ex05 
# 
# 변수 `score`에 임의의 정수를 할당한 다음 `score`가 90이상이면 `A`, 80이상 90미만이면 `B`, 70이상 80미만이면 `C`, 60이상 70미만이면 `D`, 60미만은 `F`를 출력하는 코드를 작성하라. 
# 
# ```python
# if score >= 90 :
#     print('A')
# elif 80 <= score < 90 :
#     print('B')
# elif 70 <= score < 80 :
#     print('C')
# elif 60 <= score < 70 :
#     print('D')
# else:
#     print('F')
# ```
# 
# 그런데 `score`가 90미만일 때만 그 다음 `elif` 조건을 확인하기 때문에 조건에 `< 90`은 생략할 수 있다.   
# 
# ```python
# if score >= 90 :
#     print('A')
# elif score >= 80 :
#     print('B')
# elif score >= 70 :
#     print('C')
# elif score >= 60 :
#     print('D')
# else :
#     print('F')
# ```
# 
# `if-elif-else`문에서 `else`를 사용하지 않을 수도 있다.  
# 
# ```python
# if score >= 90 :
#     print('A')
# elif score >= 80 :
#     print('B')
# elif score >= 70 :
#     print('C')
# elif score >= 60 :
#     print('D')
# elif score < 60 :
#     print('F')
# ```
# 
# ````
# 

# ## 요약

# 조건문은 특정 조건의 성립여부에 따라 다른 일을 하게 만드는 명령문이다.   
# 
# * 특정 `조건`이 참일 때만 그 아래 들여쓰기된 `코드`가 실행된다.  
# ```python
# if 조건 :
#     코드
# ```
# 
# * `elif`는 원하는 만큼 사용할 수 있고 `else`는 마지막에 한 번 사용하거나 생략한다.  
# ```python
# if score >= 90 :
#     grade = 'A'
# elif score >= 80 :
#     grade = 'B'
# else :
#     grade = 'C'
# ```
# 
# * 위에 위치한 조건의 참거짓부터 조사하며 처음으로 참인 조건 아래 코드가 실행되고 나머지는 무시된다.  

# ## 연습 문제 

# ### 문제 
# 주어진 정수 `num1`이 홀수인 경우에만 그 값에 1을 더한 값을 출력하라. 

# ### 문제  
# 주어진 정수 `num2`가 5보다 큰 경우에만 `num2`를 3으로 나눴을 때의 나머지를 출력하라. 

# ### 문제  
# 주어진 정수 `num3`의 값에 따라 `양수입니다.`, `음수입니다.`, `0입니다.`를 출력하는 코드를 작성하라. 

# ### 문제 
# 1종 운전면허를 취득하기 위해서는 학과시험에서 70점이상을 받아야 한다. 학과시험 점수가 주어졌을 때, 합격여부를 알려주는 코드를 작성하라. 

# ### 문제  
# 윤년은 윤달이나 윤일이 든 해로 달력의 계절과 실제 계절의 차이를 조절하기 위해 사용한다. 윤년 규칙은 다음과 같다.   
# * 4로 나누어 떨어지는 해는 윤년이다.  
# * 4와 100으로 나누어 떨어지는 해는 평년이다.  
# * 4와 100 그리고 400으로 나누어 떨어지는 해는 윤년이다.  
# 
# 연도가 주어졌을 때, 윤년인지 아닌지를 출력하는 코드를 작성하라. 

# ### 문제  
# 다음 코드의 결과값이 무엇인지 말하고, 코드를 실행시켜 확인하라.  
# 
# ```python
# name = '강현'
# 
# if name == '강현' :
#     print('안녕하세요', name, '님')
# else :
#     new_name = input('이름을 등록하세요 : ')
#     print('안녕하세요', new_name, '님')
# 
# print('로그인되었습니다.')
# ```

# ### 문제  
# 다음 코드의 결과값이 무엇인지 말하고, 코드를 실행시켜 확인하라.  
# 
# ```python
# fruit = "banana apple orange pineapple mango strawberry cherry"
# 
# if "tomato" in fruit :
#     print("A")
# elif "abcd" not in fruit:
#     print("B")
# elif "app" in fruit :
#     print("C")
# else :
#     print("D") 
# ```

# ### 문제 
# 다음 코드에서 오류가 발생하는 이유를 모두 말하고, 이를 수정하라.  
# 
# ```python 
# i = 10
# if i = 5 :
# print('i는 5이다.')  
# ```

# ### 문제  
# 다음 코드에서 오류가 발생하는 이유를 모두 말하고, 이를 수정하라. 
# 
# ```python
# if 3 == 3.0
# print('3과 3.0은 같다.')
# ```

# ### 문제 
# 다음 코드에서 오류가 발생하는 이유를 모두 말하고, 이를 수정하라.  
# 
# ```python
# a = 3
# b = -1
# 
# if a > 0 and b < 0 :
#     print('a는 양수다.')
#       print('b는 음수다')
#       print('a > b 이다.')
# ```

# ### 문제  
# 주어진 문자열 `weather`에 `비`가 포함되어 있다면
# > 오늘 비가 내립니다.  
# > 우산을 챙기세요! 
# 
# 를 출력하고 그렇지 않다면   
# > 비 소식은 없습니다.  
# 
# 를 출력하는 코드를 작성하라. 

# ### 문제  
# 
# `input()` 함수로 입력 받은 정수가 짝수인지 홀수인지를 출력하는 코드를 작성하라. 
# 

# ### 문제  
# `input()` 함수로 두 정수를 입력 받아 작은 수를 출력하는 코드를 작성하라. 

# ### 문제  
# `input()` 함수로 세 정수를 입력 받아 가장 큰 수를 출력하는 코드를 작성하라. 

# ### 문제 
# `input()` 함수로 세 정수를 입력 받아 처음 두 정수를 더한 값이 세 번째로 입력한 정수라면 `정답입니다`를, 아니면 `오답입니다`를 출력하는 코드를 작성하라. 

# ### 문제  
# `input()` 함수로 입력 받은 정수가 주어진 정수 `answer`와 같으면 `정답입니다`를, 크면 `너무 커요` 작으면 `너무 작아요`를 출력하는 코드를 작성하라. 

# ### 문제   
# `input()` 함수로 두 분수 A, B의 분자와 분모에 해당하는 정수를 입력 받아 어느 분수가 더 큰지를 출력하는 코드를 작성하라. 

# ### 문제  
# `input()` 함수로 정수를 입력 받아 100보다 작거나 같으면 입력 받은 수를, 100보다 크면 100을 출력하는 코드를 작성하라. 

# ### 문제  
# 골프는 낮은 점수가 이기고, 테니스는 높은 점수가 이기는 게임이다. 강현이와 나현이는 골프 또는 테니스 게임을 했다. 두 사람의 점수와 종목을 입력 받아 누가 이겼는지를 출력하는 코드를 작성하라.   

# ### 문제  
# 택배의 가격은 무게에 따라 달라진다. 아래는 한 택배 회사의 요금표이다.  
# 
# |무게(kg)|가격(원)|
# |:--:|:--:|
# | 5미만| 5,000|
# | 5이상 ~ 10미만 | 8,000 |
# | 10이상 | 10,000 |  
# 
# 우편물의 무게가 주어졌을 때, 택배 가격을 알려주는 프로그램을 만들어라.  

# ### 문제  
# 미세먼지 농도별 예보 등급은 아래와 같다.   
# 
# |미세먼지 농도($\mu g / m^3$)|예보 등급|
# |:-----------:|:-------:|
# |0 ~ 30|좋음|
# |31 ~ 80|보통|
# |81 ~ 150|나쁨|
# |151 ~ |매우나쁨|
# 
# `input()` 함수로 현재 미세먼지 농도를 입력 받아 예보 등급을 알려주는 코드를 작성하라. 
# 

# ### 문제  
# 체질량지수<font size="2">Body Mass Index</font>(BMI)는 체중(kg)을 키(m)의 제곱으로 나눈 값으로 비만도 판정에 사용한다. 
# 
# $$BMI = \frac{몸무게}{키^2}$$  
# 
# BMI에 따른 체중 분류는 아래와 같다. 
# 
# |BMI|체중 분류|
# |:--:|:----:|
# |18.5미만|저체중|
# |18.5이상 23미만|정상|
# |23이상 25미만|과체중|
# |25이상 30미만|비만|
# |30이상|고도비만|
# 
# 키와 몸무게가 주어졌을 때, BMI와 체중 분류를 출력하는 코드를 작성하라.

# ### 문제  
# 
# A대학의 일반차량에 대한 주차요금은 아래와 같다.  
# 
# * 2,000원/최초 30분, 초과 10분마다 500원, 1일(24시간) 최대요금은 40,000원  
# 
# 주차시간을 입력 받아 주차요금을 출력하는 코드를 작성하라. 

# ## [미니 프로젝트] 죄수의 딜레마

# 죄수의 딜레마<font size="2">Prisoner's Dilemma</font>은 수학자 존 내시<font size="2">John Nash</font>가 고안한 게임으로 상황은 다음과 같다.   
# 
# 사건 용의자A, B가 체포되어 서로 다른 취조실에서 심문을 받는데 이들은 자백여부에 따라 다르게 처벌받는다.   
# 
# * 둘 중 하나만 죄를 자백하면 자백한 자는 즉시 석방되고 나머지는 10년을 복역한다.   
# * 둘 다 자백하면 모두 6개월을 복역한다. 
# * 둘 다 침묵하면 모두 5년을 복역한다. 
# 
# ||용의자B의 침묵|용의자B의 자백|
# |:--:|:-----:|:---------:|
# |용의자A의 침묵|모두 6개월|A는 10년, B는 석방|
# |용의자A의 자백|A는 석방, B는 10년|모두 5년|
# 
# 용의자A가 되어 몇 년형을 받을지 확인하는 코드를 작성하라.   

# :::{admonition} 도움말  
# :class: info  
# 
# * 자백은 `1`, 침묵은 `0`으로 둔다.    
# * 용의자A의 선택은 `input()` 함수로 받는다.  
# * 용의자B의 선택은 `0`과 `1` 중 하나를 임의로 둔다. 아래 `random.randint(0, 1)`은 실행할 때마다 `0`과 `1` 중 하나를 임의로 반환한다.  
# ```python
# import random
# print(random.randint(0, 1))
# ```
# :::
# 

# ## [토이 프로젝트] 가위바위보 게임

# 컴퓨터와 가위바위보 게임을 한 다음 누가 이겼는지 출력하는 코드를 작성하라.  

# :::{admonition} 도움말  
# :class: info    
# 
# * 가위는 `0`, 바위는 `1`, 보는 `2`로 둔다.  
# * 컴퓨터가 내는 값은 `0`, `1`, `2` 중 하나를 임의로 둔다. 아래 `random.randint(0, 2)`는 실행할 때마다 `0`, `1`, `2` 중 하나를 임의로 반환한다.  
# ```python
# import random
# print(random.randint(0, 2))
# ```
# * 가위(`0`)는 보(`2`)를, 보(`2`)는 바위(`1`)를, 바위(`1`)는 가위(`0`)를 이긴다. 내가 낸 값에 2를 더한 다음 3으로 나눈 나머지가 상대가 낸 값과 같다면 게임에서 이긴다.   
# :::
# 
